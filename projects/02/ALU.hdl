// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    Mux16(a=x, b[0..15]=false, sel=zx, out=xorzero);
    Mux16(a=y, b[0..15]=false, sel=zy, out=yorzero);

    Not16(in=xorzero, out=notx);
    Not16(in=yorzero, out=noty);

    Mux16(a=xorzero, b=notx, sel=nx, out=xout);
    Mux16(a=yorzero, b=noty, sel=ny, out=yout);

    And16(a=xout, b=yout, out=xandy);
    Add16(a=xout, b=yout, out=xaddy);

    Mux16(a=xandy, b=xaddy, sel=f, out=functionout);
    Not16(in=functionout, out=notfunctionout);

    Mux16(a=functionout, b=notfunctionout, sel=no, out=tempout);
    Or16(a=tempout, b[0..15]=false, out[0..7]=firsthalf, out[8..14]=secondhalf, out[15]=most);

    Or8Way(in=firsthalf, out=firstzeros);
    Or8Way(in[0..6]=secondhalf, in[7]=most, out=secondzeros);
    Or(a=firstzeros, b=secondzeros, out=allzeros);
    Not(in=allzeros, out=zr);
    And(a=most, b=true, out=ng);
    Or16(a=tempout, b[0..15]=false, out=out);

}